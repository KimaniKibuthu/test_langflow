{"id":"e658f96d-ef31-4701-94c6-ed8a161fcf4c","data":{"nodes":[{"id":"PyPDFLoader-3KNsp","type":"genericNode","position":{"x":109.04456675475978,"y":-123.91485814523125},"data":{"type":"PyPDFLoader","node":{"template":{"file_path":{"type":"file","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"","fileTypes":[".pdf"],"file_path":"C:\\Users\\Spectra\\AppData\\Local\\langflow\\langflow\\Cache\\e658f96d-ef31-4701-94c6-ed8a161fcf4c\\1e9acb866bbd09db9a886b947d56d62dc0153f9a6be04118395004065b06b3fc.pdf","password":false,"name":"file_path","advanced":false,"dynamic":false,"info":"","title_case":true},"metadata":{"type":"dict","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":[{"":""}],"fileTypes":[],"file_path":"","password":false,"name":"metadata","display_name":"Metadata","advanced":false,"dynamic":false,"info":"","title_case":true},"_type":"PyPDFLoader"},"description":"Load PDF using pypdf into list of documents.","base_classes":["Document"],"display_name":"PyPDFLoader","documentation":"https://python.langchain.com/docs/modules/data_connection/document_loaders/how_to/pdf","custom_fields":{},"output_types":["Document"],"field_formatters":{},"beta":false},"id":"PyPDFLoader-3KNsp"},"selected":false,"width":384,"height":367,"positionAbsolute":{"x":109.04456675475978,"y":-123.91485814523125},"dragging":false},{"id":"Chroma-9QdAB","type":"genericNode","position":{"x":1174.8482107426769,"y":-127.94074273880932},"data":{"type":"Chroma","node":{"template":{"documents":{"type":"Document","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"","title_case":true},"embedding":{"type":"Embeddings","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"embedding","display_name":"Embedding","advanced":false,"dynamic":false,"info":"","title_case":true},"chroma_server_cors_allow_origins":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"chroma_server_cors_allow_origins","display_name":"Server CORS Allow Origins","advanced":true,"dynamic":false,"info":"","title_case":true},"chroma_server_grpc_port":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"chroma_server_grpc_port","display_name":"Server gRPC Port","advanced":true,"dynamic":false,"info":"","title_case":true},"chroma_server_host":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"chroma_server_host","display_name":"Server Host","advanced":true,"dynamic":false,"info":"","title_case":true},"chroma_server_port":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"chroma_server_port","display_name":"Server Port","advanced":true,"dynamic":false,"info":"","title_case":true},"chroma_server_ssl_enabled":{"type":"bool","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"chroma_server_ssl_enabled","display_name":"Server SSL Enabled","advanced":true,"dynamic":false,"info":"","title_case":true},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import List, Optional, Union\n\nimport chromadb  # type: ignore\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.schema import BaseRetriever, Document\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.chroma import Chroma\nfrom langflow import CustomComponent\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"langflow\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"advanced\": True, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        embedding: Embeddings,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        documents: Optional[List[Document]] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            if len(documents) == 0:\n                raise ValueError(\"If documents are provided, there must be at least one document.\")\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","title_case":true},"collection_name":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"langflow","fileTypes":[],"file_path":"","password":false,"name":"collection_name","display_name":"Collection Name","advanced":false,"dynamic":false,"info":"","title_case":true},"persist":{"type":"bool","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":true,"fileTypes":[],"file_path":"","password":false,"name":"persist","display_name":"Persist","advanced":false,"dynamic":false,"info":"","title_case":true},"persist_directory":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"persist_directory","display_name":"Persist Directory","advanced":false,"dynamic":false,"info":"","title_case":true,"value":"db"},"_type":"CustomComponent"},"description":"Implementation of Vector Store using Chroma","base_classes":["VectorStore","BaseRetriever"],"display_name":"Chroma","documentation":"https://python.langchain.com/docs/integrations/vectorstores/chroma","custom_fields":{"collection_name":null,"persist":null,"embedding":null,"chroma_server_ssl_enabled":null,"persist_directory":null,"documents":null,"chroma_server_cors_allow_origins":null,"chroma_server_host":null,"chroma_server_port":null,"chroma_server_grpc_port":null},"output_types":["VectorStore","BaseRetriever"],"field_formatters":{},"beta":true},"id":"Chroma-9QdAB"},"selected":false,"width":384,"height":555,"positionAbsolute":{"x":1174.8482107426769,"y":-127.94074273880932},"dragging":false},{"id":"HuggingFaceEmbeddings-c5yiy","type":"genericNode","position":{"x":596.8026367140507,"y":537.1598876194295},"data":{"type":"HuggingFaceEmbeddings","node":{"template":{"cache_folder":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"cache_folder","display_name":"Cache Folder","advanced":true,"dynamic":false,"info":"","title_case":true},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow import CustomComponent\nfrom typing import Optional, Dict\nfrom langchain_community.embeddings.huggingface import HuggingFaceEmbeddings\n\n\nclass HuggingFaceEmbeddingsComponent(CustomComponent):\n    display_name = \"HuggingFaceEmbeddings\"\n    description = \"HuggingFace sentence_transformers embedding models.\"\n    documentation = (\n        \"https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/sentence_transformers\"\n    )\n\n    def build_config(self):\n        return {\n            \"cache_folder\": {\"display_name\": \"Cache Folder\", \"advanced\": True},\n            \"encode_kwargs\": {\"display_name\": \"Encode Kwargs\", \"advanced\": True, \"field_type\": \"dict\"},\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"field_type\": \"dict\", \"advanced\": True},\n            \"model_name\": {\"display_name\": \"Model Name\"},\n            \"multi_process\": {\"display_name\": \"Multi Process\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        cache_folder: Optional[str] = None,\n        encode_kwargs: Optional[Dict] = {},\n        model_kwargs: Optional[Dict] = {},\n        model_name: str = \"sentence-transformers/all-mpnet-base-v2\",\n        multi_process: bool = False,\n    ) -> HuggingFaceEmbeddings:\n        return HuggingFaceEmbeddings(\n            cache_folder=cache_folder,\n            encode_kwargs=encode_kwargs,\n            model_kwargs=model_kwargs,\n            model_name=model_name,\n            multi_process=multi_process,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"encode_kwargs":{"type":"dict","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":{},"fileTypes":[],"file_path":"","password":false,"name":"encode_kwargs","display_name":"Encode Kwargs","advanced":true,"dynamic":false,"info":"","title_case":true},"model_kwargs":{"type":"dict","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":{},"fileTypes":[],"file_path":"","password":false,"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":true},"model_name":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"sentence-transformers/all-mpnet-base-v2","fileTypes":[],"file_path":"","password":false,"name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","title_case":true},"multi_process":{"type":"bool","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"multi_process","display_name":"Multi Process","advanced":true,"dynamic":false,"info":"","title_case":true},"_type":"CustomComponent"},"description":"HuggingFace sentence_transformers embedding models.","base_classes":["HuggingFaceEmbeddings","Embeddings"],"display_name":"HuggingFaceEmbeddings","documentation":"https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/sentence_transformers","custom_fields":{"cache_folder":null,"encode_kwargs":null,"model_kwargs":null,"model_name":null,"multi_process":null},"output_types":["HuggingFaceEmbeddings"],"field_formatters":{},"beta":true},"id":"HuggingFaceEmbeddings-c5yiy"},"selected":false,"width":384,"height":395},{"id":"VectorStoreRetriever-e7cGx","type":"genericNode","position":{"x":1644.2817281946454,"y":-159.58125824518578},"data":{"type":"VectorStoreRetriever","node":{"template":{"vectorstore":{"type":"VectorStore","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"vectorstore","display_name":"Vector Store","advanced":false,"dynamic":false,"info":"","title_case":true},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain_core.vectorstores import VectorStoreRetriever\n\nfrom langflow import CustomComponent\nfrom langflow.field_typing import VectorStore\n\n\nclass VectoStoreRetrieverComponent(CustomComponent):\n    display_name = \"VectorStore Retriever\"\n    description = \"A vector store retriever\"\n\n    def build_config(self):\n        return {\n            \"vectorstore\": {\"display_name\": \"Vector Store\", \"type\": VectorStore},\n        }\n\n    def build(self, vectorstore: VectorStore) -> VectorStoreRetriever:\n        return vectorstore.as_retriever()\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"_type":"CustomComponent"},"description":"A vector store retriever","base_classes":["VectorStoreRetriever","BaseRetriever"],"display_name":"VectorStore Retriever","documentation":"","custom_fields":{"vectorstore":null},"output_types":["VectorStoreRetriever"],"field_formatters":{},"beta":true},"id":"VectorStoreRetriever-e7cGx"},"selected":false,"width":384,"height":329,"positionAbsolute":{"x":1644.2817281946454,"y":-159.58125824518578},"dragging":false},{"id":"RetrievalQA-GQq0U","type":"genericNode","position":{"x":2209.5646263918325,"y":-138.75501888711338},"data":{"type":"RetrievalQA","node":{"template":{"combine_documents_chain":{"type":"BaseCombineDocumentsChain","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"combine_documents_chain","display_name":"Combine Documents Chain","advanced":false,"dynamic":false,"info":"","title_case":true},"memory":{"type":"BaseMemory","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"memory","display_name":"Memory","advanced":false,"dynamic":false,"info":"","title_case":true},"retriever":{"type":"BaseRetriever","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"retriever","display_name":"Retriever","advanced":false,"dynamic":false,"info":"","title_case":true},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Callable, Optional, Union\n\nfrom langchain.chains.combine_documents.base import BaseCombineDocumentsChain\nfrom langchain.chains.retrieval_qa.base import BaseRetrievalQA, RetrievalQA\nfrom langflow import CustomComponent\nfrom langflow.field_typing import BaseMemory, BaseRetriever\n\n\nclass RetrievalQAComponent(CustomComponent):\n    display_name = \"RetrievalQA\"\n    description = \"Chain for question-answering against an index.\"\n\n    def build_config(self):\n        return {\n            \"combine_documents_chain\": {\"display_name\": \"Combine Documents Chain\"},\n            \"retriever\": {\"display_name\": \"Retriever\"},\n            \"memory\": {\"display_name\": \"Memory\", \"required\": False},\n            \"input_key\": {\"display_name\": \"Input Key\", \"advanced\": True},\n            \"output_key\": {\"display_name\": \"Output Key\", \"advanced\": True},\n            \"return_source_documents\": {\"display_name\": \"Return Source Documents\"},\n        }\n\n    def build(\n        self,\n        combine_documents_chain: BaseCombineDocumentsChain,\n        retriever: BaseRetriever,\n        memory: Optional[BaseMemory] = None,\n        input_key: str = \"query\",\n        output_key: str = \"result\",\n        return_source_documents: bool = True,\n    ) -> Union[BaseRetrievalQA, Callable]:\n        return RetrievalQA(\n            combine_documents_chain=combine_documents_chain,\n            retriever=retriever,\n            memory=memory,\n            input_key=input_key,\n            output_key=output_key,\n            return_source_documents=return_source_documents,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"input_key":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"query","fileTypes":[],"file_path":"","password":false,"name":"input_key","display_name":"Input Key","advanced":true,"dynamic":false,"info":"","title_case":true},"output_key":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"result","fileTypes":[],"file_path":"","password":false,"name":"output_key","display_name":"Output Key","advanced":true,"dynamic":false,"info":"","title_case":true},"return_source_documents":{"type":"bool","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"return_source_documents","display_name":"Return Source Documents","advanced":false,"dynamic":false,"info":"","title_case":true},"_type":"CustomComponent"},"description":"Chain for question-answering against an index.","base_classes":["BaseRetrievalQA","Chain","Callable"],"display_name":"RetrievalQA","documentation":"","custom_fields":{"combine_documents_chain":null,"retriever":null,"memory":null,"input_key":null,"output_key":null,"return_source_documents":null},"output_types":["BaseRetrievalQA","Callable"],"field_formatters":{},"beta":true},"id":"RetrievalQA-GQq0U"},"selected":false,"width":384,"height":501,"positionAbsolute":{"x":2209.5646263918325,"y":-138.75501888711338},"dragging":false},{"id":"CombineDocsChain-JZOmB","type":"genericNode","position":{"x":1705.1549297377155,"y":325.79213081241784},"data":{"type":"CombineDocsChain","node":{"template":{"llm":{"type":"BaseLanguageModel","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"","fileTypes":[],"file_path":"","password":false,"name":"llm","display_name":"LLM","advanced":false,"dynamic":false,"info":"","title_case":true},"chain_type":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"value":"stuff","fileTypes":[],"file_path":"","password":false,"options":["stuff","map_reduce","map_rerank","refine"],"name":"chain_type","advanced":false,"dynamic":false,"info":"","title_case":true},"_type":"load_qa_chain"},"description":"Load question answering chain.","base_classes":["BaseCombineDocumentsChain","Callable"],"display_name":"CombineDocsChain","documentation":"","custom_fields":{},"output_types":[],"field_formatters":{},"beta":false},"id":"CombineDocsChain-JZOmB"},"selected":true,"width":384,"height":333,"dragging":false},{"id":"ChatAnthropic-baB8O","type":"genericNode","position":{"x":1171.1549297377157,"y":469.7921308124178},"data":{"type":"ChatAnthropic","node":{"template":{"anthropic_api_key":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":true,"name":"anthropic_api_key","display_name":"Anthropic API Key","advanced":false,"dynamic":false,"info":"","title_case":true,"value":""},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Callable, Optional, Union\n\nfrom langchain_anthropic import ChatAnthropic\nfrom pydantic.v1.types import SecretStr\n\nfrom langflow import CustomComponent\nfrom langflow.field_typing import BaseLanguageModel\n\n\nclass ChatAnthropicComponent(CustomComponent):\n    display_name = \"ChatAnthropic\"\n    description = \"`Anthropic` chat large language models.\"\n    documentation = \"https://python.langchain.com/docs/modules/model_io/models/chat/integrations/anthropic\"\n\n    def build_config(self):\n        return {\n            \"anthropic_api_key\": {\n                \"display_name\": \"Anthropic API Key\",\n                \"field_type\": \"str\",\n                \"password\": True,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"dict\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\"claude-3-opus-20240229\", \"claude-3-sonnet-20240229\", \"claude-3-haiku-20240307\"],\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n            },\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"top_k\": {\"display_name\": \"Top K\", \"field_type\": \"int\", \"advanced\": True},\n            \"top_p\": {\"display_name\": \"Top P\", \"field_type\": \"float\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        anthropic_api_key: str,\n        #model_kwargs: dict = {},\n        model_name: str = \"claude-3-opus-20240229\",\n        temperature: Optional[float] = None,\n        max_tokens: Optional[int] = 1024,\n        top_k: Optional[int] = None,\n        top_p: Optional[float] = None,\n    ) -> Union[BaseLanguageModel, Callable]:\n        return ChatAnthropic(\n            anthropic_api_key=SecretStr(anthropic_api_key),\n            #model_kwargs=model_kwargs,\n            model_name=model_name,\n            temperature=temperature,\n            max_tokens=max_tokens,  # type: ignore\n            top_k=top_k,\n            top_p=top_p,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"max_tokens":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"500","fileTypes":[],"file_path":"","password":false,"name":"max_tokens","display_name":"Max Tokens","advanced":false,"dynamic":false,"info":"","title_case":true},"model_name":{"type":"str","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"value":"claude-3-opus-20240229","fileTypes":[],"file_path":"","password":false,"options":["claude-3-opus-20240229","claude-3-sonnet-20240229","claude-3-haiku-20240307"],"name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","title_case":true},"temperature":{"type":"float","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"temperature","display_name":"Temperature","advanced":false,"dynamic":false,"info":"","rangeSpec":{"min":-1,"max":1,"step":0.1},"title_case":true,"value":"0.3"},"top_k":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"top_k","display_name":"Top K","advanced":true,"dynamic":false,"info":"","title_case":true},"top_p":{"type":"float","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"top_p","display_name":"Top P","advanced":true,"dynamic":false,"info":"","rangeSpec":{"min":-1,"max":1,"step":0.1},"title_case":true},"_type":"CustomComponent"},"description":"`Anthropic` chat large language models.","base_classes":["BaseLanguageModel","Callable"],"display_name":"ChatAnthropic","documentation":"https://python.langchain.com/docs/modules/model_io/models/chat/integrations/anthropic","custom_fields":{"anthropic_api_key":null,"model_name":null,"temperature":null,"max_tokens":null,"top_k":null,"top_p":null},"output_types":["BaseLanguageModel","Callable"],"field_formatters":{},"beta":true},"id":"ChatAnthropic-baB8O","description":"`Anthropic` chat large language models.","display_name":"ChatAnthropic"},"selected":false,"width":384,"height":637,"positionAbsolute":{"x":1171.1549297377157,"y":469.7921308124178},"dragging":false},{"id":"Document-jZ0x2","type":"genericNode","position":{"x":611.7961035601302,"y":-95.63565182592042},"data":{"type":"Document","node":{"template":{"documents":{"type":"Document","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"The documents to split.","title_case":true},"chunk_overlap":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"250","fileTypes":[],"file_path":"","password":false,"name":"chunk_overlap","display_name":"Chunk Overlap","advanced":false,"dynamic":false,"info":"The amount of overlap between chunks.","title_case":true},"chunk_size":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"1000","fileTypes":[],"file_path":"","password":false,"name":"chunk_size","display_name":"Chunk Size","advanced":false,"dynamic":false,"info":"The maximum length of each chunk.","title_case":true},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional\n\nfrom langchain_core.documents import Document\n\nfrom langflow import CustomComponent\nfrom langflow.utils.util import build_loader_repr_from_documents\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.langflow.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"documents\": {\n                \"display_name\": \"Documents\",\n                \"info\": \"The documents to split.\",\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        documents: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Document]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [x.encode().decode(\"unicode-escape\") for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n\n        docs = splitter.split_documents(documents)\n        self.repr_value = build_loader_repr_from_documents(docs)\n        return docs\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"separators":{"type":"str","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"separators","display_name":"Separators","advanced":false,"dynamic":false,"info":"The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].","title_case":true},"_type":"CustomComponent"},"description":"Split text into chunks of a specified length.","base_classes":["Document"],"display_name":"Recursive Character Text Splitter","documentation":"https://docs.langflow.org/components/text-splitters#recursivecharactertextsplitter","custom_fields":{"documents":null,"separators":null,"chunk_size":null,"chunk_overlap":null},"output_types":["Document"],"field_formatters":{},"beta":true},"id":"Document-jZ0x2"},"selected":false,"width":384,"height":587}],"edges":[{"source":"HuggingFaceEmbeddings-c5yiy","sourceHandle":"{œbaseClassesœ:[œHuggingFaceEmbeddingsœ,œEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingsœ,œidœ:œHuggingFaceEmbeddings-c5yiyœ}","target":"Chroma-9QdAB","targetHandle":"{œfieldNameœ:œembeddingœ,œidœ:œChroma-9QdABœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}","data":{"targetHandle":{"fieldName":"embedding","id":"Chroma-9QdAB","inputTypes":null,"type":"Embeddings"},"sourceHandle":{"baseClasses":["HuggingFaceEmbeddings","Embeddings"],"dataType":"HuggingFaceEmbeddings","id":"HuggingFaceEmbeddings-c5yiy"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-HuggingFaceEmbeddings-c5yiy{œbaseClassesœ:[œHuggingFaceEmbeddingsœ,œEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingsœ,œidœ:œHuggingFaceEmbeddings-c5yiyœ}-Chroma-9QdAB{œfieldNameœ:œembeddingœ,œidœ:œChroma-9QdABœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"},{"source":"Chroma-9QdAB","sourceHandle":"{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-9QdABœ}","target":"VectorStoreRetriever-e7cGx","targetHandle":"{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreRetriever-e7cGxœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}","data":{"targetHandle":{"fieldName":"vectorstore","id":"VectorStoreRetriever-e7cGx","inputTypes":null,"type":"VectorStore"},"sourceHandle":{"baseClasses":["VectorStore","BaseRetriever"],"dataType":"Chroma","id":"Chroma-9QdAB"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-Chroma-9QdAB{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-9QdABœ}-VectorStoreRetriever-e7cGx{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreRetriever-e7cGxœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}"},{"source":"CombineDocsChain-JZOmB","sourceHandle":"{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-JZOmBœ}","target":"RetrievalQA-GQq0U","targetHandle":"{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-GQq0Uœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}","data":{"targetHandle":{"fieldName":"combine_documents_chain","id":"RetrievalQA-GQq0U","inputTypes":null,"type":"BaseCombineDocumentsChain"},"sourceHandle":{"baseClasses":["BaseCombineDocumentsChain","Callable"],"dataType":"CombineDocsChain","id":"CombineDocsChain-JZOmB"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-CombineDocsChain-JZOmB{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-JZOmBœ}-RetrievalQA-GQq0U{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-GQq0Uœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}","selected":false},{"source":"VectorStoreRetriever-e7cGx","sourceHandle":"{œbaseClassesœ:[œVectorStoreRetrieverœ,œBaseRetrieverœ],œdataTypeœ:œVectorStoreRetrieverœ,œidœ:œVectorStoreRetriever-e7cGxœ}","target":"RetrievalQA-GQq0U","targetHandle":"{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-GQq0Uœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}","data":{"targetHandle":{"fieldName":"retriever","id":"RetrievalQA-GQq0U","inputTypes":null,"type":"BaseRetriever"},"sourceHandle":{"baseClasses":["VectorStoreRetriever","BaseRetriever"],"dataType":"VectorStoreRetriever","id":"VectorStoreRetriever-e7cGx"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-VectorStoreRetriever-e7cGx{œbaseClassesœ:[œVectorStoreRetrieverœ,œBaseRetrieverœ],œdataTypeœ:œVectorStoreRetrieverœ,œidœ:œVectorStoreRetriever-e7cGxœ}-RetrievalQA-GQq0U{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-GQq0Uœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"},{"source":"ChatAnthropic-baB8O","sourceHandle":"{œbaseClassesœ:[œBaseLanguageModelœ,œCallableœ],œdataTypeœ:œChatAnthropicœ,œidœ:œChatAnthropic-baB8Oœ}","target":"CombineDocsChain-JZOmB","targetHandle":"{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-JZOmBœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}","data":{"targetHandle":{"fieldName":"llm","id":"CombineDocsChain-JZOmB","inputTypes":null,"type":"BaseLanguageModel"},"sourceHandle":{"baseClasses":["BaseLanguageModel","Callable"],"dataType":"ChatAnthropic","id":"ChatAnthropic-baB8O"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-ChatAnthropic-baB8O{œbaseClassesœ:[œBaseLanguageModelœ,œCallableœ],œdataTypeœ:œChatAnthropicœ,œidœ:œChatAnthropic-baB8Oœ}-CombineDocsChain-JZOmB{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-JZOmBœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"},{"source":"PyPDFLoader-3KNsp","sourceHandle":"{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-3KNspœ}","target":"Document-jZ0x2","targetHandle":"{œfieldNameœ:œdocumentsœ,œidœ:œDocument-jZ0x2œ,œinputTypesœ:null,œtypeœ:œDocumentœ}","data":{"targetHandle":{"fieldName":"documents","id":"Document-jZ0x2","inputTypes":null,"type":"Document"},"sourceHandle":{"baseClasses":["Document"],"dataType":"PyPDFLoader","id":"PyPDFLoader-3KNsp"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-PyPDFLoader-3KNsp{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-3KNspœ}-Document-jZ0x2{œfieldNameœ:œdocumentsœ,œidœ:œDocument-jZ0x2œ,œinputTypesœ:null,œtypeœ:œDocumentœ}"},{"source":"Document-jZ0x2","sourceHandle":"{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDocumentœ,œidœ:œDocument-jZ0x2œ}","target":"Chroma-9QdAB","targetHandle":"{œfieldNameœ:œdocumentsœ,œidœ:œChroma-9QdABœ,œinputTypesœ:null,œtypeœ:œDocumentœ}","data":{"targetHandle":{"fieldName":"documents","id":"Chroma-9QdAB","inputTypes":null,"type":"Document"},"sourceHandle":{"baseClasses":["Document"],"dataType":"Document","id":"Document-jZ0x2"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-Document-jZ0x2{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDocumentœ,œidœ:œDocument-jZ0x2œ}-Chroma-9QdAB{œfieldNameœ:œdocumentsœ,œidœ:œChroma-9QdABœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"}],"viewport":{"x":60.57482202578058,"y":430.9824597944381,"zoom":0.5000000000000007}},"description":"Example RAG with langflow","name":"example_rag","last_tested_version":"0.6.16","is_component":false}